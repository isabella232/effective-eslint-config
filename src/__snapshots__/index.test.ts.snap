// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Full configuration result 1`] = `
"{
  \\"env\\": {
    \\"browser\\": true,
    \\"es6\\": true,
    \\"node\\": true,
    \\"shared-node-browser\\": true
  },
  \\"globals\\": {},
  \\"ignorePatterns\\": [
    \\"dist\\"
  ],
  \\"parser\\": \\"[PATH]\\",
  \\"parserOptions\\": {
    \\"ecmaFeatures\\": {
      \\"impliedStrict\\": true,
      \\"jsx\\": true
    },
    \\"ecmaVersion\\": 2018,
    \\"sourceType\\": \\"module\\",
    \\"warnOnUnsupportedTypeScriptVersion\\": true
  },
  \\"plugins\\": [
    \\"filenames\\",
    \\"jest\\",
    \\"unicorn\\",
    \\"shopify-lean\\",
    \\"jsdoc\\",
    \\"react-hooks\\",
    \\"@typescript-eslint\\"
  ],
  \\"rules\\": {
    \\"@typescript-eslint/adjacent-overload-signatures\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/ban-ts-ignore\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/ban-types\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/camelcase\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/class-name-casing\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/consistent-type-assertions\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/explicit-function-return-type\\": [
      \\"warn\\"
    ],
    \\"@typescript-eslint/interface-name-prefix\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/member-delimiter-style\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-array-constructor\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-empty-function\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-empty-interface\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-explicit-any\\": [
      \\"warn\\"
    ],
    \\"@typescript-eslint/no-inferrable-types\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-misused-new\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-namespace\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-non-null-assertion\\": [
      \\"warn\\"
    ],
    \\"@typescript-eslint/no-this-alias\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-unused-vars\\": [
      \\"warn\\"
    ],
    \\"@typescript-eslint/no-use-before-define\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/no-var-requires\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/prefer-namespace-keyword\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/triple-slash-reference\\": [
      \\"error\\"
    ],
    \\"@typescript-eslint/type-annotation-spacing\\": [
      \\"error\\"
    ],
    \\"camelcase\\": [
      \\"off\\"
    ],
    \\"constructor-super\\": [
      \\"error\\"
    ],
    \\"for-direction\\": [
      \\"error\\"
    ],
    \\"no-array-constructor\\": [
      \\"off\\"
    ],
    \\"no-async-promise-executor\\": [
      \\"error\\"
    ],
    \\"no-case-declarations\\": [
      \\"error\\"
    ],
    \\"no-class-assign\\": [
      \\"error\\"
    ],
    \\"no-compare-neg-zero\\": [
      \\"error\\"
    ],
    \\"no-cond-assign\\": [
      \\"error\\"
    ],
    \\"no-constant-condition\\": [
      \\"error\\"
    ],
    \\"no-control-regex\\": [
      \\"error\\"
    ],
    \\"no-debugger\\": [
      \\"error\\"
    ],
    \\"no-delete-var\\": [
      \\"error\\"
    ],
    \\"no-duplicate-case\\": [
      \\"error\\"
    ],
    \\"no-empty\\": [
      \\"error\\"
    ],
    \\"no-empty-character-class\\": [
      \\"error\\"
    ],
    \\"no-empty-function\\": [
      \\"off\\"
    ],
    \\"no-empty-pattern\\": [
      \\"error\\"
    ],
    \\"no-ex-assign\\": [
      \\"error\\"
    ],
    \\"no-extra-boolean-cast\\": [
      \\"error\\"
    ],
    \\"no-extra-semi\\": [
      \\"error\\"
    ],
    \\"no-fallthrough\\": [
      \\"error\\"
    ],
    \\"no-func-assign\\": [
      \\"error\\"
    ],
    \\"no-global-assign\\": [
      \\"error\\"
    ],
    \\"no-inner-declarations\\": [
      \\"error\\"
    ],
    \\"no-invalid-regexp\\": [
      \\"error\\"
    ],
    \\"no-irregular-whitespace\\": [
      \\"error\\"
    ],
    \\"no-misleading-character-class\\": [
      \\"error\\"
    ],
    \\"no-mixed-spaces-and-tabs\\": [
      \\"error\\"
    ],
    \\"no-obj-calls\\": [
      \\"error\\"
    ],
    \\"no-octal\\": [
      \\"error\\"
    ],
    \\"no-prototype-builtins\\": [
      \\"error\\"
    ],
    \\"no-regex-spaces\\": [
      \\"error\\"
    ],
    \\"no-self-assign\\": [
      \\"error\\"
    ],
    \\"no-shadow-restricted-names\\": [
      \\"error\\"
    ],
    \\"no-sparse-arrays\\": [
      \\"error\\"
    ],
    \\"no-unexpected-multiline\\": [
      \\"error\\"
    ],
    \\"no-unsafe-finally\\": [
      \\"error\\"
    ],
    \\"no-unsafe-negation\\": [
      \\"error\\"
    ],
    \\"no-unused-labels\\": [
      \\"error\\"
    ],
    \\"no-unused-vars\\": [
      \\"off\\"
    ],
    \\"no-use-before-define\\": [
      \\"off\\"
    ],
    \\"no-useless-catch\\": [
      \\"error\\"
    ],
    \\"no-useless-escape\\": [
      \\"error\\"
    ],
    \\"no-var\\": [
      \\"error\\"
    ],
    \\"no-with\\": [
      \\"error\\"
    ],
    \\"prefer-const\\": [
      \\"error\\"
    ],
    \\"prefer-rest-params\\": [
      \\"error\\"
    ],
    \\"prefer-spread\\": [
      \\"error\\"
    ],
    \\"require-yield\\": [
      \\"error\\"
    ],
    \\"use-isnan\\": [
      \\"error\\"
    ]
  },
  \\"settings\\": {
    \\"import/parsers\\": {
      \\"@typescript-eslint/parser\\": [
        \\".ts\\",
        \\".tsx\\"
      ]
    },
    \\"import/resolver\\": {
      \\"babel-module\\": {
        \\"alias\\": {
          \\"-\\": \\"./src/\\"
        },
        \\"extensions\\": [
          \\".js\\",
          \\".jsx\\",
          \\".ts\\",
          \\".tsx\\",
          \\".json\\"
        ]
      }
    },
    \\"react\\": {
      \\"version\\": \\"16.10\\"
    }
  }
}"
`;

exports[`load config in eslint to validate all rule syntax is correct 1`] = `
Object {
  "errorCount": 1,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "results": Array [
    Object {
      "errorCount": 1,
      "filePath": "<text>",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 1,
          "endColumn": 18,
          "endLine": 2,
          "line": 2,
          "message": "Missing return type on function.",
          "messageId": "missingReturnType",
          "nodeType": "FunctionDeclaration",
          "ruleId": "@typescript-eslint/explicit-function-return-type",
          "severity": 1,
        },
        Object {
          "column": 19,
          "line": 2,
          "message": "Unexpected empty function 'second'.",
          "messageId": "unexpected",
          "nodeType": "FunctionDeclaration",
          "ruleId": "@typescript-eslint/no-empty-function",
          "severity": 2,
        },
      ],
      "source": "const first = 1
function second() {}
second(first)
",
      "warningCount": 1,
    },
  ],
  "usedDeprecatedRules": Array [
    Object {
      "replacedBy": Array [
        "@typescript-eslint/ban-ts-comment",
      ],
      "ruleId": "@typescript-eslint/ban-ts-ignore",
    },
    Object {
      "replacedBy": Array [
        "naming-convention",
      ],
      "ruleId": "@typescript-eslint/camelcase",
    },
    Object {
      "replacedBy": Array [
        "naming-convention",
      ],
      "ruleId": "@typescript-eslint/class-name-casing",
    },
    Object {
      "replacedBy": Array [
        "naming-convention",
      ],
      "ruleId": "@typescript-eslint/interface-name-prefix",
    },
  ],
  "warningCount": 1,
}
`;

exports[`reports undeclared variable 1`] = `
Object {
  "errorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "results": Array [
    Object {
      "errorCount": 0,
      "filePath": "<text>",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [],
      "warningCount": 0,
    },
  ],
  "usedDeprecatedRules": Array [
    Object {
      "replacedBy": Array [
        "@typescript-eslint/ban-ts-comment",
      ],
      "ruleId": "@typescript-eslint/ban-ts-ignore",
    },
    Object {
      "replacedBy": Array [
        "naming-convention",
      ],
      "ruleId": "@typescript-eslint/camelcase",
    },
    Object {
      "replacedBy": Array [
        "naming-convention",
      ],
      "ruleId": "@typescript-eslint/class-name-casing",
    },
    Object {
      "replacedBy": Array [
        "naming-convention",
      ],
      "ruleId": "@typescript-eslint/interface-name-prefix",
    },
  ],
  "warningCount": 0,
}
`;
